<!-- views/partials/sidepanel.ejs -->
<div class="sidepanel" style="background-color: rgb(30, 30, 30)">
	<button type="button" data-target="chat" class="btn btn-dark sidebuttons">
		Open Chat
	</button>
	<button
		type="button"
		data-target="codespace"
		class="btn btn-dark sidebuttons"
	>
		Open Codespace
	</button>
	<div class="mb-3 files">
		<% if (server && server.filePaths) { %>
		<p class="h4 text-white mb-4" style="text-align: center">
			Uploaded Files (<%= server.filePaths.length %>/10)
		</p>
		<% } else { %>
		<p class="h4 text-white mb-4" style="text-align: center">Uploaded Files</p>
		<% } %>
		<div class="files mb-4">
			<% if (server && server.filePaths && server.filePaths.length > 0) { %> <%
			server.filePaths.forEach(function(filePath, index) { %> <% var fileName =
			filePath.split('/').pop().replace(/\\/g, '/'); %> <% var displayFileName =
			fileName.length > 15 ? fileName.substring(0, 15) + '...' : fileName; %>
			<div
				class="file-item"
				data-filepath="<%= filePath %>"
				data-serverid="<%= server.id %>"
			>
				<button
					type="button"
					class="btn btn-outline-warning file-button"
					onclick="window.open('<%= filePath %>', '_blank')"
				>
					<%= displayFileName %>
				</button>
				<button class="btn btn-danger delete-file-btn" title="Delete file">
					X
				</button>
			</div>
			<% }); %> <% } else { %>
			<p class="text-white">No files uploaded yet.</p>
			<% } %>

			<!-- views/partials/sidepanel.ejs -->

			<form
				id="uploadForm"
				action="/upload"
				method="post"
				enctype="multipart/form-data"
			>
				<input type="hidden" name="serverId" value="<%= currentServer.id %>" />
				<label for="file-input" class="form-label text-white"
					>Add a new file</label
				>
				<input
					class="form-control mb-3"
					type="file"
					id="file-input"
					name="file"
				/>
				<button type="submit" class="uploadbtn btn btn-success">
					Upload File
				</button>
			</form>
		</div>
	</div>
</div>

<!-- views/partials/sidepanel.ejs -->
<script defer>
	/**
	 * Handles the file upload process using the Fetch API, with modern JavaScript syntax.
	 * Validates the file selection, checks for file size limits, and provides user feedback through alerts and UI updates.
	 * The submit button is updated with a spinning icon and disabled during the upload process, then reset afterwards.
	 *
	 * @listens submit - Adds an event listener to the file upload form's submit event to prevent default submission and handle file uploads.
	 */
	document
		.getElementById("uploadForm")
		.addEventListener("submit", async function (event) {
			event.preventDefault(); // Prevent the default form submission

			const fileInput = document.getElementById("file-input");
			if (!fileInput.files.length) {
				alert("Please select a file to upload.");
				return; // Exit the function if no file is selected
			}

			if (fileInput.files.length > 10) {
				alert("You can only upload up to 10 files.");
				return;
			}

			for (let i = 0; i < fileInput.files.length; i++) {
				if (fileInput.files[i].size > 20 * 1024 * 1024) {
					// 20 MB limit
					alert("Each file must be no larger than 20 MB.");
					return;
				}
			}

			const formData = new FormData(this); // Create a FormData object from the form
			const uploadButton = document.querySelector(".uploadbtn"); // Select the upload button

			// Update button text with spinner icon and disable button
			uploadButton.innerHTML =
				'Uploading... <i class="fa fa-spinner fa-spin"></i>';
			uploadButton.disabled = true;

			try {
				const response = await fetch("/upload", {
					method: "POST",
					body: formData,
				});

				if (response.ok) {
					const result = await response.json();
					alert(result.message); // Display success message
					setTimeout(() => {
						location.reload(); // Reload the page after 2 seconds
					}, 2000);
				} else {
					const errorMsg = await response.text();
					alert(`Upload failed: ${errorMsg}`);
				}
			} catch (error) {
				console.error("Upload error:", error);
				alert(`Error during upload: ${error.message}`);
			} finally {
				// Reset button text and re-enable button regardless of request outcome
				uploadButton.innerHTML = "Upload File";
				uploadButton.disabled = false;
			}
		});
</script>

<script defer>
	/**
	 * Adds click event listeners to all delete file buttons. On click, the script confirms the user's intention to delete,
	 * then sends a POST request to the server to delete the specified file. Feedback is provided to the user through alerts,
	 * and upon successful deletion, the file's UI element is removed.
	 *
	 * @listens click - Attaches click event listeners to buttons for deleting files.
	 */
	document.querySelectorAll(".delete-file-btn").forEach((button) => {
		button.addEventListener("click", async function () {
			const fileItem = this.closest(".file-item");
			const filePath = fileItem.getAttribute("data-filepath");
			const serverId = fileItem.getAttribute("data-serverid");
			const fileName = filePath.split("/").pop();

			const isConfirmed = confirm(
				`Are you sure you want to delete "${fileName}"?`
			);
			if (!isConfirmed) {
				return;
			}

			console.log(filePath, serverId);

			try {
				const response = await fetch("/delete-file", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({ fileUrl: filePath, serverId: serverId }), // Ensure these keys match server expectation
					credentials: "include",
				});

				if (response.ok) {
					const result = await response.json();
					alert(result.message);
					fileItem.remove();
				} else {
					const error = await response.json();
					throw new Error(error.message);
				}
			} catch (error) {
				console.error("Error:", error);
				alert("Error deleting file: " + error.message);
			}
		});
	});
</script>
