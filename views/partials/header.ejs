<!-- Start of the sidebar container -->
<div
	class="sidebar-container"
	style="display: flex; flex-direction: column; height: 97%"
>
	<!-- Container for servers, taking up 66% of the height -->
	<div class="servers" style="flex-grow: 2; overflow-y: auto">
		<% servers.forEach(function(server) { %>
		<a
			href="/server/<%= server.id %>"
			data-bs-toggle="tooltip"
			data-bs-placement="right"
			data-bs-title="<%= server.name%>"
		>
			<img
				class="server-avatar"
				src="<%= server.profilePicture %>"
				alt="PFP of <%= server.name %>"
			/>
		</a>
		<% }); %>
	</div>

	<!-- Container for buttons, taking up the remaining space -->
	<div
		class="server-buttons"
		style="
			flex-grow: 1;
			display: flex;
			flex-direction: column;
			justify-content: end;
		"
	>
		<!-- plus button -->
		<button
			type="button"
			class="btn"
			id="plusbutton"
			data-bs-toggle="modal"
			data-bs-target="#serverOptionsModal"
			style="width: 100%; color: white; font-size: 20px"
		>
			<i class="fa-solid fa-plus fa-2xl"></i>
		</button>

		<button
			type="button"
			class="btn"
			id="settingsButton"
			data-bs-toggle="modal"
			data-bs-target="#userSettingsModal"
			style="width: 100%; color: white; font-size: 20px"
		>
			<i class="fa-solid fa-gear fa-2xl"></i>
		</button>
	</div>
</div>
<!-- End of the sidebar container -->

<!-- Server Options Modal -->
<div
	class="modal fade"
	id="serverOptionsModal"
	tabindex="-1"
	aria-labelledby="serverOptionsModalLabel"
	aria-hidden="true"
>
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="serverOptionsModalLabel">Server Options</h5>
				<button
					type="button"
					class="btn-close"
					data-bs-dismiss="modal"
					aria-label="Close"
				></button>
			</div>
			<div class="modal-body">
				<!-- Join Server Button inside the modal -->
				<h3>Create a New Server!</h3>

				<form id="createServerForm" enctype="multipart/form-data">
					<div class="mb-3">
						<label for="serverName" class="form-label">Server Name</label>
						<input
							type="text"
							class="form-control"
							id="serverName"
							name="serverName"
							required
							autocomplete="new-password"
						/>
					</div>
					<div class="mb-3">
						<label for="serverImage" class="form-label">Server Image</label>
						<input
							type="file"
							class="form-control"
							id="serverImage"
							name="serverProfilePicture"
						/>
					</div>
					<button type="submit" class="btn btn-primary">Create</button>
					<br />
					<br />
					<br />
					<h3>Join an Existing Server!</h3>
				</form>
				<!-- Create Server Button inside the modal -->
				<form id="joinServerForm">
					<div class="mb-3">
						<label for="serverCode" class="form-label">Server Code</label>
						<input
							type="text"
							class="form-control"
							id="serverCode"
							name="serverCode"
							required
							autocomplete="new-password"
						/>
					</div>
					<button type="submit" class="btn btn-primary">Join</button>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- User Settings Modal -->
<div
	class="modal fade"
	id="userSettingsModal"
	tabindex="-1"
	aria-labelledby="userSettingsModalLabel"
	aria-hidden="true"
>
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="userSettingsModalLabel">User Settings</h5>
				<button
					type="button"
					class="btn-close"
					data-bs-dismiss="modal"
					aria-label="Close"
				></button>
			</div>
			<div class="modal-body">
				<!-- Change Username Form -->
				<form id="changeUsernameForm">
					<div class="mb-3">
						<label for="newUsername" class="form-label">New Username</label>
						<input
							type="text"
							class="form-control"
							id="newUsername"
							name="newUsername"
							required
							autocomplete="new-password"
						/>
					</div>
					<button type="submit" class="btn btn-primary">Change Username</button>
				</form>

				<hr />
				<!-- Horizontal Line -->
				<!-- Change Profile Picture Form -->
				<form
					id="changePFPForm"
					action="/upload-user-profile"
					method="POST"
					enctype="multipart/form-data"
				>
					<div class="mb-3">
						<label for="profilePicture" class="form-label"
							>New Profile Picture</label
						>
						<input
							type="file"
							class="form-control"
							id="profilePicture"
							name="profilePicture"
							required
						/>
					</div>
					<button type="submit" class="btn btn-primary">Change PFP</button>
				</form>

				<hr />
				<!-- Horizontal Line -->
				<!-- Logout Button -->
				<button id="logoutButton" class="btn btn-danger" style="width: 100%">
					Logout
				</button>
				<br />
				<!-- Horizontal Line -->
				<!-- Delete Account Button -->
				<button
					id="deleteAccountButton"
					class="btn btn-warning"
					style="width: 100%; margin-top: 10px"
				>
					Delete Account
				</button>
				<hr>
			</div>
		</div>
	</div>
</div>

<script src="/onboardingScript.js"></script>

<script defer>
	window.addEventListener("DOMContentLoaded", (event) => {
		const changeUsernameForm = document.getElementById("changeUsernameForm");

		if (!changeUsernameForm) {
			console.error("Change username form not found");
			return;
		}

		changeUsernameForm.addEventListener("submit", async (event) => {
			event.preventDefault(); // Prevent the default form submission
			console.log("Handling change username form submission");

			const formData = new FormData(changeUsernameForm);

			for (let [key, value] of formData.entries()) {
				console.log(key, value);
			}

			try {
				const response = await fetch("/change-username", {
					method: "POST",
					body: formData,
					credentials: "include", // Include cookies for session management
				});

				if (response.ok) {
					const result = await response.json();
					alert(result.message || "Username changed successfully");
					// Optionally, redirect or update UI here
				} else {
					throw new Error("Failed to change username");
				}
			} catch (error) {
				console.error("Error:", error);
				alert(error.message || "Error changing username");
			}
		});
	});
	document
		.getElementById("logoutButton")
		.addEventListener("click", function () {
			// Redirect to the logout route
			window.location.href = "/logout";
		});
</script>
<script defer>
	// Target the form for uploading the user profile picture
	const changePFPForm = document.getElementById("changePFPForm");

	if (!changePFPForm) {
		console.error("Upload profile picture form not found");
		// Do not return anything here
	} else {
		changePFPForm.addEventListener("submit", async (event) => {
			event.preventDefault(); // Prevent the default form submission
			console.log("Handling upload profile picture form submission");

			const formData = new FormData(changePFPForm);

			for (let [key, value] of formData.entries()) {
				console.log(key, value);
			}

			try {
				const response = await fetch("/upload-user-profile", {
					method: "POST",
					body: formData,
					credentials: "include", // Include cookies for session management
				});

				if (response.ok) {
					const result = await response.json();
					alert(result.message || "Profile picture uploaded successfully");
					// Redirect to the home page if a redirectUrl is provided
					if (result.redirectUrl) {
						window.location.href = result.redirectUrl;
					}
				} else {
					throw new Error("Failed to upload profile picture");
				}
			} catch (error) {
				console.error("Error:", error);
				alert(error.message || "Error uploading profile picture");
			}
		});
	}
</script>
<script defer>
	window.addEventListener("DOMContentLoaded", (event) => {
		console.log("DOM fully loaded and parsed");

		const deleteAccountButton = document.getElementById("deleteAccountButton");

		if (!deleteAccountButton) {
			console.error("Delete account button not found");
			return;
		}

		deleteAccountButton.addEventListener("click", async () => {
			try {
				const response = await fetch("/delete-account", {
					method: "DELETE",
					credentials: "include", // Include cookies for session management
				});

				if (response.ok) {
					alert("Account deleted successfully. You will be logged out.");
					// Optionally, redirect to the login page or home page
					window.location.href = "/login"; // or "/home" if you have a home page
				} else {
					throw new Error("Failed to delete account");
				}
			} catch (error) {
				console.error("Error:", error);
				alert(error.message || "Error deleting account");
			}
		});
	});
</script>
