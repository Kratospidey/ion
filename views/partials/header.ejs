<!-- Start of the sidebar container -->
<div
	class="sidebar-container"
	style="display: flex; flex-direction: column; height: 97%"
>
	<!-- Container for servers, taking up 66% of the height -->
	<div class="servers" style="flex-grow: 2; overflow-y: auto">
		<% servers.forEach(function(server) { %>
		<a
			href="/server/<%= server.id %>"
			data-bs-toggle="tooltip"
			data-bs-placement="right"
			data-bs-title="<%= server.name%>"
		>
			<img
				class="server-avatar"
				src="<%= server.profilePicture %>"
				alt="PFP of <%= server.name %>"
			/>
		</a>
		<% }); %>
	</div>

	<!-- Container for buttons, taking up the remaining space -->
	<div
		class="server-buttons"
		style="
			flex-grow: 1;
			display: flex;
			flex-direction: column;
			justify-content: end;
		"
	>
		<!-- plus button -->
		<button
			type="button"
			class="btn"
			id="plusbutton"
			data-bs-toggle="modal"
			data-bs-target="#serverOptionsModal"
			style="width: 100%; color: white; font-size: 20px"
		>
			<i class="fa-solid fa-plus fa-lg"></i>
		</button>

		<button
			type="button"
			class="btn"
			id="settingsButton"
			data-bs-toggle="modal"
			data-bs-target="#userSettingsModal"
			style="width: 100%; color: white; font-size: 20px"
		>
			<i class="fa-solid fa-gear fa-lg"></i>
		</button>
	</div>
</div>
<!-- End of the sidebar container -->

<!-- Server Options Modal -->
<div
	class="modal fade"
	id="serverOptionsModal"
	tabindex="-1"
	aria-labelledby="serverOptionsModalLabel"
	aria-hidden="true"
>
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="serverOptionsModalLabel">Server Options</h5>
				<button
					type="button"
					class="btn-close"
					data-bs-dismiss="modal"
					aria-label="Close"
				></button>
			</div>
			<div class="modal-body">
				<!-- Join Server Button inside the modal -->
				<h3>Create a New Server!</h3>

				<form id="createServerForm" enctype="multipart/form-data">
					<div class="mb-3">
						<label for="serverName" class="form-label">Server Name</label>
						<input
							type="text"
							class="form-control"
							id="serverName"
							name="serverName"
							required
							autocomplete="new-password"
						/>
					</div>
					<div class="mb-3">
						<label for="serverImage" class="form-label">Server Image</label>
						<input
							type="file"
							class="form-control"
							id="serverImage"
							name="serverProfilePicture"
						/>
					</div>
					<button type="submit" class="btn btn-primary">Create</button>
					<br />
					<br />
					<br />
					<h3>Join an Existing Server!</h3>
				</form>
				<!-- Create Server Button inside the modal -->
				<form id="joinServerForm">
					<div class="mb-3">
						<label for="serverCode" class="form-label">Server Code</label>
						<input
							type="text"
							class="form-control"
							id="serverCode"
							name="serverCode"
							required
							autocomplete="new-password"
						/>
					</div>
					<button type="submit" class="btn btn-primary">Join</button>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- User Settings Modal -->
<div
	class="modal fade"
	id="userSettingsModal"
	tabindex="-1"
	aria-labelledby="userSettingsModalLabel"
	aria-hidden="true"
>
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="userSettingsModalLabel">User Settings</h5>
				<button
					type="button"
					class="btn-close"
					data-bs-dismiss="modal"
					aria-label="Close"
					style="color: white"
				></button>
			</div>
			<div class="modal-body">
				<!-- Change Username Form -->
				<form id="changeUsernameForm">
					<div class="mb-3">
						<label for="newUsername" class="form-label">New Username</label>
						<input
							type="text"
							class="form-control"
							id="newUsername"
							name="newUsername"
							required
							autocomplete="new-password"
							maxlength="12"
						/>
					</div>
					<button
						type="submit"
						class="btn btn-primary"
						id="change-username-button"
					>
						<span id="change-username-button-text">Change Username</span>
					</button>
				</form>

				<hr />
				<!-- Horizontal Line -->
				<!-- Change Profile Picture Form -->
				<form
					id="changePFPForm"
					action="/upload-user-profile"
					method="POST"
					enctype="multipart/form-data"
				>
					<div class="mb-3">
						<label for="profilePicture" class="form-label"
							>New Profile Picture</label
						>
						<input
							type="file"
							class="form-control"
							id="profilePicture"
							name="profilePicture"
							required
						/>
					</div>
					<button type="submit" class="btn" id="changePFPButton">
						<span id="changePFPButtonText">Change PFP</span>
					</button>
				</form>

				<hr />
				<!-- Horizontal Line -->
				<!-- Logout Button -->
				<button id="logoutButton" class="btn" style="width: 100%">
					Logout
				</button>
				<br />
				<!-- Horizontal Line -->
				<!-- Delete Account Button -->
				<button
					id="deleteAccountButton"
					class="btn"
					style="width: 100%; margin-top: 10px"
				>
					Delete Account
				</button>
				<hr />
				<!-- Server Creator Message -->
				<div id="serverCreatorMessage" style="display: none">
					<h3>Server Settings</h3>
					<p>
						You need to be the creator of the server to modify these settings.
					</p>
				</div>
				<div id="serverSettingsSection" style="display: none">
					<h3>Server Settings</h3>
					<!-- Change Server Profile Picture Form -->
					<form id="changeServerPFPForm" enctype="multipart/form-data">
						<input type="hidden" id="serverIdInput" name="serverId" />
						<div class="mb-3">
							<label for="serverPFP" class="form-label"
								>New Server Profile Picture</label
							>
							<input
								type="file"
								class="form-control"
								id="serverPFP"
								name="serverProfilePicture"
								required
							/>
						</div>
						<button
							type="submit"
							class="btn btn-primary"
							id="changeServerPFPButton"
						>
							<span id="changeServerPFPButtonText">Change Server PFP</span>
						</button>
						<hr />
					</form>

					<!-- Change Server Name Form -->
					<form id="changeServerNameForm">
						<div class="mb-3">
							<label for="newServerName" class="form-label"
								>New Server Name</label
							>
							<input
								type="text"
								class="form-control"
								id="newServerName"
								name="newServerName"
								required
								autocomplete="new-password"
							/>
						</div>
						<button
							type="submit"
							class="btn btn-primary"
							id="changeServerNameButton"
						>
							<span id="changeServerNameButtonText">Change Server Name</span>
						</button>
					</form>
					<hr />
					<!-- Remove Member Form -->
					<form id="removeMemberForm">
						<div class="mb-3">
							<label for="memberToRemove" class="form-label"
								>Select Member to Remove</label
							>
							<select
								class="form-select"
								id="memberToRemove"
								name="memberToRemove"
								required
							>
								<!-- Options will be populated dynamically based on server members -->
							</select>
						</div>
						<button
							type="submit"
							class="btn btn-warning"
							id="removeMemberButton"
						>
							<span id="removeMemberButtonText">Remove Member</span>
						</button>
					</form>
					<hr />

					<!-- Delete Server Form -->
					<form id="deleteServerForm">
						<button type="submit" class="btn btn-danger">Delete Server</button>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>

<script src="/onboardingScript.js"></script>

<script defer>
	window.addEventListener("DOMContentLoaded", (event) => {
		const changeUsernameForm = document.getElementById("changeUsernameForm");
		const changeUsernameButton = document.getElementById(
			"change-username-button"
		);
		const changeUsernameButtonText = document.getElementById(
			"change-username-button-text"
		);

		if (!changeUsernameForm || !changeUsernameButtonText) {
			console.error("Change username form or button text element not found");
			return;
		}

		changeUsernameForm.addEventListener("submit", async (event) => {
			event.preventDefault(); // Prevent the default form submission
			console.log("Handling change username form submission");

			// Change button text and show spinner
			changeUsernameButton.disabled = true;
			changeUsernameButtonText.innerHTML =
				'Changing Username... <i class="fa fa-spinner fa-spin"></i>';

			const formData = new FormData(changeUsernameForm);

			try {
				const response = await fetch("/change-username", {
					method: "POST",
					body: formData,
					credentials: "include", // Include cookies for session management
				});

				// Read the response as JSON only once
				const result = await response.json();

				if (response.ok) {
					alert(result.message || "Username changed successfully");
					// Optionally, redirect or update UI here
				} else {
					// Use the error message from the server response
					alert(result.error || "Failed to change username");
				}
			} catch (error) {
				console.error("Error:", error);
				alert("An error occurred while trying to change the username.");
			} finally {
				// Restore the button text to its original state
				changeUsernameButton.disabled = false;
				changeUsernameButtonText.innerHTML = "Change Username";
			}
		});
	});

	document
		.getElementById("logoutButton")
		.addEventListener("click", function () {
			// Redirect to the logout route
			window.location.href = "/logout";
		});
</script>
<script defer>
	// Target the form for uploading the user profile picture
	const changePFPForm = document.getElementById("changePFPForm");
	const changePFPButton = document.getElementById("changePFPButton"); // Target the new span in the button
	const changePFPButtonText = document.getElementById("changePFPButtonText"); // Target the new span in the button

	if (!changePFPForm || !changePFPButtonText) {
		console.error(
			"Upload profile picture form or button text element not found"
		);
	} else {
		changePFPForm.addEventListener("submit", async (event) => {
			event.preventDefault(); // Prevent the default form submission
			console.log("Handling upload profile picture form submission");

			// Change button text and show spinner
			changePFPButton.disabled = true;
			changePFPButtonText.innerHTML =
				'Uploading... <i class="fa fa-spinner fa-spin"></i>'; // Ensure you have a spinner icon library

			const formData = new FormData(changePFPForm);

			for (let [key, value] of formData.entries()) {
				console.log(key, value);
			}

			try {
				const response = await fetch("/upload-user-profile", {
					method: "POST",
					body: formData,
					credentials: "include", // Include cookies for session management
				});

				if (response.ok) {
					const result = await response.json();
					alert(result.message || "Profile picture uploaded successfully");
					// Redirect to the home page if a redirectUrl is provided
					if (result.redirectUrl) {
						window.location.href = result.redirectUrl;
					}
				} else {
					throw new Error("Failed to upload profile picture");
				}
			} catch (error) {
				console.error("Error:", error);
				alert(error.message || "Error uploading profile picture");
			} finally {
				// Restore the button text to its original state after the operation is complete
				changePFPButton.disabled = false;
				changePFPButtonText.innerHTML = "Change PFP";
			}
		});
	}
</script>
<script defer>
	window.addEventListener("DOMContentLoaded", (event) => {
		const deleteAccountButton = document.getElementById("deleteAccountButton");

		if (!deleteAccountButton) {
			console.error("Delete account button not found");
			return;
		}

		deleteAccountButton.addEventListener("click", async () => {
			try {
				const response = await fetch("/delete-account", {
					method: "DELETE",
					credentials: "include", // Include cookies for session management
				});

				if (response.ok) {
					alert("Account deleted successfully. You will be logged out.");
					// Optionally, redirect to the login page or home page
					window.location.href = "/login"; // or "/home" if you have a home page
				} else {
					throw new Error("Failed to delete account");
				}
			} catch (error) {
				console.error("Error:", error);
				alert(error.message || "Error deleting account");
			}
		});
	});
</script>

<script defer>
	function getServerIdFromUrl() {
		const path = window.location.pathname; // Gets the path part of the URL
		const match = path.match(/\/server\/(\d+)/); // Regular expression to match the /server/{id} pattern

		if (match && match[1]) {
			return match[1]; // Return the first capturing group (the server ID)
		} else {
			return null; // Return null if the pattern is not found
		}
	}

	window.addEventListener("DOMContentLoaded", (event) => {
		const changeServerPFPForm = document.getElementById("changeServerPFPForm");
		const changeServerPFPButton = document.getElementById(
			"changeServerPFPButton"
		);
		const changeServerPFPButtonText = document.getElementById(
			"changeServerPFPButtonText"
		);

		if (!changeServerPFPForm || !changeServerPFPButtonText) {
			console.error(
				"Change server profile picture form or button text element not found"
			);
			return;
		}

		changeServerPFPForm.addEventListener("submit", async (event) => {
			event.preventDefault(); // Prevent default form submission

			// Change button text and show spinner
			changeServerPFPButton.disabled = true;
			changeServerPFPButtonText.innerHTML =
				'Uploading... <i class="fa fa-spinner fa-spin"></i>';

			const formData = new FormData(changeServerPFPForm);
			formData.append(
				"serverId",
				document.getElementById("serverIdInput").value
			); // Use the server ID from the hidden input

			try {
				const response = await fetch("/upload-server-profile", {
					method: "POST",
					body: formData,
					credentials: "include", // Include cookies for session management
				});

				if (response.ok) {
					const result = await response.json();
					alert("Server profile picture changed successfully");
					// Optionally, redirect or update UI here
				} else {
					throw new Error("Failed to change server profile picture");
				}
			} catch (error) {
				console.error("Error:", error);
				alert("Error changing server profile picture");
			} finally {
				// Restore the button text to its original state after the operation is complete
				changeServerPFPButton.disabled = false;
				changeServerPFPButtonText.innerHTML = "Change Server PFP";
			}
		});

		// Change Server Name Form
		const changeServerNameForm = document.getElementById(
			"changeServerNameForm"
		);
		const changeServerNameButton = document.getElementById(
			"changeServerNameButton"
		);
		const changeServerNameButtonText = document.getElementById(
			"changeServerNameButtonText"
		); // Target the new span in the button

		if (changeServerNameForm && changeServerNameButtonText) {
			changeServerNameForm.addEventListener("submit", async (event) => {
				event.preventDefault();
				console.log("Handling change server name form submission");

				// Change button text and show spinner
				changeServerNameButton.disabled = true;
				changeServerNameButtonText.innerHTML =
					'Updating... <i class="fa fa-spinner fa-spin"></i>';

				const formData = new FormData(changeServerNameForm);
				const serverId = getServerIdFromUrl(); // Assuming you have a function to extract the server ID from the URL
				formData.append("serverId", serverId); // Add serverId to formData

				try {
					const response = await fetch("/change-server-name", {
						method: "POST",
						body: formData,
						credentials: "include",
					});

					if (response.ok) {
						const result = await response.json();
						alert(result.message || "Server name changed successfully");
						// Optionally, redirect or update UI here
					} else {
						throw new Error("Failed to change server name");
					}
				} catch (error) {
					console.error("Error:", error);
					alert(error.message || "Error changing server name");
				} finally {
					// Restore the button text to its original state after the operation is complete
					changeServerNameButton.disabled = false;
					changeServerNameButtonText.innerHTML = "Change Server Name";
				}
			});
		}

		// Delete Server Form
		const deleteServerForm = document.getElementById("deleteServerForm");
		if (deleteServerForm) {
			deleteServerForm.addEventListener("submit", async (event) => {
				event.preventDefault();
				console.log("Handling delete server form submission");

				const serverId = getServerIdFromUrl(); // Use the existing function to get the server ID

				try {
					const response = await fetch(`/delete-server/${serverId}`, {
						method: "DELETE",
						credentials: "include",
					});

					if (response.ok) {
						const result = await response.json();
						alert(result.message || "Server deleted successfully");
						window.location.href = result.redirectUrl || "/home"; // Redirect to the provided URL or home
					} else {
						throw new Error("Failed to delete server");
					}
				} catch (error) {
					console.error("Error:", error);
					alert(error.message || "Error deleting server");
				}
			});
		}

		// Remove Member Form
		const removeMemberForm = document.getElementById("removeMemberForm");
		const memberToRemoveSelect = document.getElementById("memberToRemove");
		const removeMemberButton = document.getElementById("removeMemberButton");
		const removeMemberButtonText = document.getElementById(
			"removeMemberButtonText"
		);

		// Function to fetch server members and populate the dropdown
		async function populateMemberDropdown(serverId) {
			if (!serverId) {
				return;
			}
			const response = await fetch(`/api/server/${serverId}/members`);
			const members = await response.json();
			// Clear existing options
			memberToRemoveSelect.innerHTML = "";
			// Populate the dropdown with new options
			members.forEach((member) => {
				// Assuming you have the member's ID and username
				if (member.id !== member.ownerId) {
					// Ensure ownerId is being sent in the API response
					// Don't add the server creator
					const option = document.createElement("option");
					option.value = member.id;
					option.textContent = member.username;
					memberToRemoveSelect.appendChild(option);
				}
			});
		}

		// Call this function when the modal is opened or when you need to populate the dropdown
		populateMemberDropdown(getServerIdFromUrl());

		if (removeMemberForm && removeMemberButtonText) {
			removeMemberForm.addEventListener("submit", async (event) => {
				event.preventDefault();
				console.log("Handling remove member form submission");

				// Change button text and show spinner
				removeMemberButton.disabled = true;
				removeMemberButtonText.innerHTML =
					'Removing... <i class="fa fa-spinner fa-spin"></i>';

				const serverId = getServerIdFromUrl(); // Assuming a function to extract the server ID
				const memberToRemove = document.getElementById("memberToRemove").value;

				const data = { serverId, memberToRemove };

				try {
					const response = await fetch("/remove-member", {
						method: "POST",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify(data),
						credentials: "include",
					});

					if (response.ok) {
						const result = await response.json();
						alert(result.message || "Member removed successfully");
						// Optionally, refresh the member list or update UI here
					} else {
						const errorText = await response.text();
						throw new Error(errorText || "Failed to remove member");
					}
				} catch (error) {
					console.error("Error:", error);
					alert(error.message || "Error removing member");
				} finally {
					// Restore the button text to its original state after the operation is complete
					removeMemberButton.disabled = false;
					removeMemberButtonText.innerHTML = "Remove Member";
				}
			});
		}
	});
</script>

<script defer>
	async function checkIfCurrentUserIsServerCreator(serverId) {
		try {
			const response = await fetch(`/api/is-creator/${serverId}`, {
				method: "GET",
				credentials: "include", // to include cookies with the request
			});

			if (response.ok) {
				const data = await response.json();
				return data.isCreator;
			} else {
				console.error(
					"Failed to check if user is server creator",
					response.status
				);
				return false; // Assuming false if the request fails
			}
		} catch (error) {
			console.error("Error checking if user is server creator", error);
			return false;
		}
	}

	window.addEventListener("DOMContentLoaded", async (event) => {
		// Elements from the DOM
		const userSettingsModal = document.getElementById("userSettingsModal");
		const serverSettingsSection = document.getElementById(
			"serverSettingsSection"
		);
		const serverSettingsTitle = serverSettingsSection.querySelector("h3"); // Get the <h3> element inside serverSettingsSection
		const serverCreatorMessage = document.getElementById(
			"serverCreatorMessage"
		);
		const serverCreatorMessageTitle = serverCreatorMessage.querySelector("h3"); // Get the <h3> element inside serverCreatorMessage

		// Helper function to extract the server ID from the URL
		function getServerIdFromUrl() {
			const urlPath = window.location.pathname;
			const serverIdMatch = urlPath.match(/\/server\/(\d+)/);
			return serverIdMatch ? serverIdMatch[1] : null;
		}

		// Function to fetch the server name based on the server ID
		async function fetchServerName(serverId) {
			// Placeholder for API call to fetch server name
			// Replace with your actual API call
			const response = await fetch(`/api/server/${serverId}/name`);
			const data = await response.json();
			return data.name;
		}

		// Main logic to show/hide sections and set titles based on the server ID and user role
		const serverId = getServerIdFromUrl();
		if (serverId) {
			// Fetch the server name and update the <h3> elements
			const serverName = await fetchServerName(serverId);
			serverSettingsTitle.textContent = `Settings for ${serverName}`;
			serverCreatorMessageTitle.textContent = `Settings for ${serverName}`;

			// Determine if the current user is the creator of the server
			const isCreator = await checkIfCurrentUserIsServerCreator(serverId); // Assuming this function is defined elsewhere in your code
			if (isCreator) {
				serverSettingsSection.style.display = "block";
				serverCreatorMessage.style.display = "none";
			} else {
				serverSettingsSection.style.display = "none";
				serverCreatorMessage.style.display = "block";
			}
		} else {
			// We're not on a server page, hide both sections
			serverSettingsSection.style.display = "none";
			serverCreatorMessage.style.display = "none";
		}
	});
</script>
